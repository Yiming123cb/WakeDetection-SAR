import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.transform import radon

#Load the SAR image
img_path = r"D:\Master Project\Opensarwake\OpenSARWake_1.0\test\images\42.png"  # Replace with your image path
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

#Preprocessing (denoising + contrast enhancement)
img_blur = cv2.GaussianBlur(img, (3, 3), 0)
img_eq = cv2.equalizeHist(img_blur)

# ptionally crop the center region (focus on wake area)
h, w = img_eq.shape
crop = img_eq[h//4:3*h//4, w//4:3*w//4]  # Crop the central 50% region

# Edge detection + morphological closing to suppress clutter 
edges = cv2.Canny(crop, 50, 150)
kernel = np.ones((3, 3), np.uint8)
edges_morph = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)

# Hough Line Transform
lines = cv2.HoughLines(edges_morph, 1, np.pi / 180, threshold=20)
img_color = cv2.cvtColor(crop, cv2.COLOR_GRAY2BGR)

if lines is not None:
    for i in range(min(50, len(lines))):  # Draw at most 50 lines
        rho, theta = lines[i][0]
        theta_deg = np.degrees(theta)

        # ðŸŽ¯ Only keep line directions close to typical wake angles
        if 25 < theta_deg < 65 or 115 < theta_deg < 155:
            a = np.cos(theta)
            b = np.sin(theta)
            x0 = a * rho
            y0 = b * rho
            x1 = int(x0 + 1000 * (-b))
            y1 = int(y0 + 1000 * (a))
            x2 = int(x0 - 1000 * (-b))
            y2 = int(y0 - 1000 * (a))
            cv2.line(img_color, (x1, y1), (x2, y2), (0, 255, 0), 2)

#  Radon transform to analyze global dominant direction 
theta = np.linspace(0., 180., max(crop.shape), endpoint=False)
sinogram = radon(crop, theta=theta)
main_angle = theta[np.argmax(np.mean(sinogram, axis=0))]

# === Step 7: Visualization ===
fig, axs = plt.subplots(2, 2, figsize=(12, 10))

axs[0, 0].imshow(img_eq, cmap='gray')
axs[0, 0].set_title("Original Preprocessed Image")

axs[0, 1].imshow(edges_morph, cmap='gray')
axs[0, 1].set_title("Edges (Canny + Morphology)")

axs[1, 0].imshow(img_color)
axs[1, 0].set_title("Hough Line Detection (Filtered)")

axs[1, 1].imshow(sinogram, cmap='gray', aspect='auto')
axs[1, 1].set_title(f"Radon Transform (Dominant Angle: {main_angle:.1f}Â°)")

plt.tight_layout()
plt.show()
